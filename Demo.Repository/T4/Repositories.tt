<#@ template language="C#" debug="True" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="$(SolutionDir)\EasyAccess.Infrastructure\bin\Debug\EasyAccess.Infrastructure.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="EasyAccess.Infrastructure.Entity" #> 
<#@ import namespace="EasyAccess.Infrastructure.Util.T4" #>

<#@ include file="T4Toolbox.tt" #>
<#@ include file="Include\Repository.ttinclude" #>
<#
	string currentPath = Path.GetDirectoryName(Host.TemplateFile);
    string projectPath =currentPath.Substring(0, currentPath.IndexOf(@"\T4"));
    string solutionPath = currentPath.Substring(0, currentPath.IndexOf(@"\Demo.Repository"));
	
	string modelFile= Path.Combine(solutionPath, @"Demo.Model\bin\Debug\Demo.Model.dll");
    byte[] fileData= File.ReadAllBytes(modelFile);
    Assembly assembly = Assembly.Load(fileData);

	IEnumerable<Type> aggregateRoots = assembly.GetTypes().Where(m => typeof(IAggregateRoot).IsAssignableFrom(m) && !m.IsAbstract);

	foreach(Type aggregateRoot in aggregateRoots)
    {
		T4ModelInfo model = new T4ModelInfo(aggregateRoot);
		RepositoryTemplate repositoryTemplate = new RepositoryTemplate(model);
		repositoryTemplate.Output.Encoding = Encoding.UTF8;
		repositoryTemplate.RenderToFile(Path.Combine(string.Format(@"{0}\Repositories\Generated", projectPath), repositoryTemplate.FileName));
	}
#>